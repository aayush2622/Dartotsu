name: RELEASE
on:
  push:
    tags: 
      - "v*.*.*"
jobs:
  build_android:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Setup Cmake
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.18.1'
      # Install Ninaja
      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build
      # Create symlink for ninja
      - name: Create symlink for ninja
        run: |
          mkdir -p /usr/local/lib/android/sdk/cmake/3.18.1/bin
          sudo ln -s /usr/bin/ninja /usr/local/lib/android/sdk/cmake/3.18.1/bin/ninja
        

      - uses: actions/setup-java@v4
        with:
          distribution: "oracle"
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.27.1
          cache: true

          # Download the keystore file (from GitHub Secrets or other storage)
      - name: Download keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.APK_SIGN }}
        run: echo "$KEYSTORE_BASE64" | base64 --decode > android/app/dartotsu.jks

      # Set up environment variables for signing
      - name: Set up signing variables
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS}}
        run: |
          echo "storePassword=$KEYSTORE_PASSWORD" > android/key.properties
          echo "keyPassword=$KEY_PASSWORD" >> android/key.properties
          echo "keyAlias=$KEY_ALIAS" >> android/key.properties
          echo "storeFile=dartotsu.jks" >> android/key.properties
      # Create .env:
      - name: Setup env File
        env:
          SIMKL_SECRET: ${{ secrets.SIMKL_SECRET }}
        run: |
          echo "SIMKL_SECRET= $SIMKL_SECRET" > .env

      # Optimize Flutter build
      - run: flutter clean
      - run: flutter pub get
      - run: flutter build apk --release --split-per-abi

      - name: Rename APKs
        run: |
          for file in build/app/outputs/flutter-apk/app-*-release.apk; do
            abi=$(basename $file | sed 's/app-\(.*\)-release.apk/\1/')
            mv $file build/app/outputs/flutter-apk/Dartotsu_Android_${abi}_${{github.ref_name}}.apk
          done
          ls build/app/outputs/flutter-apk
      - name: Android Apk Release
        uses: softprops/action-gh-release@master
        with:
          files: build/app/outputs/flutter-apk/Dartotsu_Android_*_${{ github.ref_name }}.apk
        
  build_windows:
    runs-on: windows-latest
    permissions: 
        contents: write
        pull-requests: write
        repository-projects: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Cache Flutter and Dart dependencies
      - uses: actions/cache@v4
        with:
          path: |
            C:\hostedtoolcache\windows\flutter
            ~\AppData\Local\Pub\Cache
            build\
            .dart_tool\
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Set up Signing Tool
        run: |
          mkdir $env:USERPROFILE\certs
          [System.IO.File]::WriteAllBytes("$env:USERPROFILE\certs\Dartotsu.pfx", [Convert]::FromBase64String("${{secrets.PFX_FILE}}"))
      # Create .env:
      - name: Setup env File
        env:
          SIMKL_SECRET: ${{ secrets.SIMKL_SECRET }}
        run: |
          echo "SIMKL_SECRET= $env:SIMKL_SECRET" > .env

      # Setup Flutter with caching
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.27.1
          cache: true
      - name: Setup NuGet.exe for use with actions
        uses: NuGet/setup-nuget@v2.0.1
        with:
          nuget-version: 'latest'
      # Enable Windows desktop support
      - name: Enable Windows desktop support
        run: flutter config --enable-windows-desktop

      - run: flutter clean

      # Get dependencies with cached packages
      - run: flutter pub get

      - name: Extract Version
        id: get_version
        run: |
          $version = (Get-Content pubspec.yaml | Select-String -Pattern 'version: ([\d.]+)').Matches.Groups[1].Value
          echo "version=$version" >> $env:GITHUB_ENV

      - name: Build and Sign Setup
        run: |
          dart run inno_bundle:build --sign-tool-params '"C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe" sign /fd sha256 /f "C:\Users\runneradmin\certs\Dartotsu.pfx" /p "${{secrets.PFX_PASSWORD}}" /t http://timestamp.digicert.com /v $f' --release
      - name: Release Windows Zip
        uses: softprops/action-gh-release@master
        with:
            files: build/windows/x64/installer/Release/Dartotsu-x86_64-${{env.version}}-Installer.exe
        
    
  build_linux:
    runs-on: ubuntu-latest
    permissions: 
        contents: write
        pull-requests: write
        repository-projects: write
    steps:
      # Step 1: Clone repository
      - name: Cloning repository
        uses: actions/checkout@v4

      # Step 2: Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.27.1
          cache: true

      # Step 3: Setup system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev webkit2gtk-4.1 libmpv-dev pkg-config

      # Create .env:
      - name: Setup env File
        env:
          SIMKL_SECRET: ${{ secrets.SIMKL_SECRET }}
        run: |
          echo "SIMKL_SECRET= $SIMKL_SECRET" > .env

      # Step 5: Fetch Flutter dependencies
      - name: Fetch Flutter dependencies
        run: flutter pub get

      # Step 6: Build the Linux application
      - name: Build Flutter Linux app
        run: flutter build linux

      # Step 7: Archive the app
      - name: Archive app
        uses: thedoctor0/zip-release@master
        with:
          type: "zip"
          filename: Dantotsu_Linux_${{github.ref_name}}.zip
          directory: build/linux/x64/release/bundle
      - name: Release Linux Zip
        uses: softprops/action-gh-release@master
        with:
            files: build/linux/x64/release/bundle/Dantotsu_Linux_${{github.ref_name}}.zip
  build_ios:
    runs-on: macos-latest
    permissions: 
        contents: write
        pull-requests: write
        repository-projects: write
    steps:
      # Step 1: Clone repository
      - name: Cloning repository
        uses: actions/checkout@v4

      # Step 2: Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.27.1
          cache: true
      
      - name: Setup .env File for macOS
        env:
          SIMKL_SECRET: ${{ secrets.SIMKL_SECRET }}
        run: |
          echo "SIMKL_SECRET= $SIMKL_SECRET" > .env
        shell: bash
        

      # Step 3 Get Dependencies
      - name: Get Dependencies
        run: flutter pub get
      #Step 4 Build app for iOS
      - name: Build iOS
        run: |
          flutter build ios --release --no-codesign
          cd build/ios/iphoneos
          mkdir -p Payload
          cd Payload
          ln -s ../Runner.app
          cd ..
          zip -r Dartotsu-iOS-${{ github.ref_name }}.ipa Payload

      - name: Release Linux Zip
        uses: softprops/action-gh-release@master
        with:
            files: build/ios/iphoneos/Dartotsu-iOS-${{github.ref_name}}.ipa
  build_macos:
    runs-on: macos-latest
    permissions: 
        contents: write
        pull-requests: write
        repository-projects: write
    steps:
      - name: Cloning repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.27.1
          cache: true
      - name: Setup .env File for macOS
        env:
          SIMKL_SECRET: ${{ secrets.SIMKL_SECRET }}
        run: |
          echo "SIMKL_SECRET= $SIMKL_SECRET" > .env
        shell: bash
      - name: Get Dependencies
        run: flutter pub get
      - name: Build macOS
        run: flutter build macos --release
      - name: Create DMG file for macOS Build
        run: |
          mkdir -p build/macos/Release
          hdiutil create -volname "Dartotsu" -srcfolder build/macos/Build/Products/Release/Dantotsu.app -ov -format UDZO build/macos/Release/Dartotsu-macos-${{github.ref_name}}.dmg
        shell: bash
      - name: Release macOS Zip
        uses: softprops/action-gh-release@master
        with:
            files: build/macos/Release/Dartotsu-macos-${{github.ref_name}}.dmg



  make_and_upload_git_changes:
    runs-on: ubuntu-latest
    needs: [build_android, build_windows, build_linux, build_ios, build_macos]
    permissions:
      contents: read
      pull-requests: read
      actions: read
    steps:
      - name: Cloing repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download last SHA artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: release.yml
          name: last-sha
        continue-on-error: true

      - name: Get Commits Since Last Run
        run: |
          if [ -f last_sha.txt ]; then
            LAST_SHA=$(cat last_sha.txt)
          else
            # Fallback to first commit if no previous SHA available
            LAST_SHA=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "Commits since $LAST_SHA:"
          # Accumulate commit logs in a shell variable
          COMMIT_LOGS=$(git log $LAST_SHA..HEAD --pretty=format:"● %s ~%an [֍](https://github.com/${{ github.repository }}/commit/%H)" --max-count=15)
          # URL-encode the newline characters for GitHub Actions
          COMMIT_LOGS="${COMMIT_LOGS//'%'/'%25'}"
          COMMIT_LOGS="${COMMIT_LOGS//$'\n'/'%0A'}"
          COMMIT_LOGS="${COMMIT_LOGS//$'\r'/'%0D'}"
          # Append the encoded commit logs to the COMMIT_LOG environment variable
          echo "COMMIT_LOG=${COMMIT_LOGS}" >> $GITHUB_ENV
          # Debugging: Print the variable to check its content
          echo "$COMMIT_LOGS"
          echo "$COMMIT_LOGS" > commit_log.txt
          # Extract branch name from github.ref
          BRANCH=${{ github.ref }}
          BRANCH=${BRANCH#refs/heads/}
          echo "BRANCH=${BRANCH}" >> $GITHUB_ENV
        shell: /usr/bin/bash -e {0}
        env:
          CI: true
        continue-on-error: true

      - name: Save Current SHA for Next Run
        run: echo ${{ github.sha }} > last_sha.txt

      - name: Upload APK to Discord and Telegram
        shell: bash
        run: |
          # Prepare Discord embed
          fetch_user_details() {
            local login=$1
            user_details=$(curl -s "https://api.github.com/users/$login")
            name=$(echo "$user_details" | jq -r '.name // .login')
            login=$(echo "$user_details" | jq -r '.login')
            avatar_url=$(echo "$user_details" | jq -r '.avatar_url')
            echo "$name|$login|$avatar_url"
          }

          # Additional information for the goats
          declare -A additional_info
          additional_info["ibo"]="\n Discord: <@951737931159187457>\n AniList: [takarealist112](<https://anilist.co/user/5790266/>)"
          additional_info["aayush262"]="\n Discord: <@918825160654598224>\n AniList: [aayush262](<https://anilist.co/user/5144645/>)"
          additional_info["Ankit Grai"]="\n Discord: <@1125628254330560623>\n AniList: [bheshnarayan](<https://anilist.co/user/6417303/>)\n X: [grayankit01](<https://x.com/grayankit01>)"
          # Decimal color codes for contributors
          declare -A contributor_colors
          default_color="#1ac4c5"
          contributor_colors["aayush262"]="#5d689d"
          contributor_colors["Sadwhy"]="#ff7e95"
          contributor_colors["grayankit"]="#c51aa1"
          contributor_colors["rebelonion"]="#d4e5ed"
          hex_to_decimal() { printf '%d' "0x${1#"#"}"; }

          # Count recent commits and create an associative array
          declare -A recent_commit_counts
          echo "Debug: Processing COMMIT_LOG:"
          echo "$COMMIT_LOG"
          while read -r count name; do
              recent_commit_counts["$name"]=$count
              echo "Debug: Commit count for $name: $count"
          done < <(echo "$COMMIT_LOG" | sed 's/%0A/\n/g' | grep -oP '(?<=~)[^[]*' | sort | uniq -c | sort -rn)

          echo "Debug: Fetching contributors from GitHub"
          # Fetch contributors from GitHub
          contributors=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{secrets.FINE_GRAIN_TOKEN}}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{github.repository}}/contributors)
          echo "Debug: Contributors response:"
          echo "$contributors"

          # Create a sorted list of contributors based on recent commit counts
          sorted_contributors=$(for login in $(echo "$contributors" | jq -r '.[].login'); do
              user_info=$(fetch_user_details "$login")
              name=$(echo "$user_info" | cut -d'|' -f1)
              count=${recent_commit_counts["$name"]:-0}
              echo "$count|$login"
          done | sort -rn | cut -d'|' -f2)

          # Initialize needed variables
          developers=""
          committers_count=0
          max_commits=0
          top_contributor=""
          top_contributor_count=0
          top_contributor_avatar=""
          embed_color=$(hex_to_decimal "$default_color")

          # Process contributors in the new order
          while read -r login; do
            user_info=$(fetch_user_details "$login")
            name=$(echo "$user_info" | cut -d'|' -f1)
            login=$(echo "$user_info" | cut -d'|' -f2)
            avatar_url=$(echo "$user_info" | cut -d'|' -f3)

          # Only process if they have recent commits
          commit_count=${recent_commit_counts["$name"]:-0}
          if [ $commit_count -gt 0 ]; then
            # Update top contributor information
            if [ $commit_count -gt $max_commits ]; then
              max_commits=$commit_count
              top_contributors=("$login")
              top_contributor_count=1
              top_contributor_avatar="$avatar_url"
              embed_color=$(hex_to_decimal "${contributor_colors[$name]:-$default_color}")
            elif [ $commit_count -eq $max_commits ]; then
              top_contributors+=("$login")
              top_contributor_count=$((top_contributor_count + 1))
              embed_color=$(hex_to_decimal "$default_color")
            fi
            echo "Debug top contributors:"
            echo "$top_contributors"


            # Get commit count for this contributor on the main branch
            branch_commit_count=$(git log --author="$login" --author="$name" --oneline | awk '!seen[$0]++' | wc -l)

            # Debug: Print recent_commit_counts
            echo "Debug: recent_commit_counts contents:"
            for key in "${!recent_commit_counts[@]}"; do
              echo "$key: ${recent_commit_counts[$key]}"
            done

            extra_info="${additional_info[$name]}"
            if [ -n "$extra_info" ]; then
              extra_info=$(echo "$extra_info" | sed 's/\\n/\n- /g')
            fi

            # Construct the developer entry
            developer_entry="◗ **${name}** ${extra_info}
          - Github: [${login}](https://github.com/${login})
          - Commits: ${branch_commit_count}"



            # Add the entry to developers, with a newline if it's not the first entry
            if [ -n "$developers" ]; then
              developers="${developers}
          ${developer_entry}"
              else
                developers="${developer_entry}"
              fi
              committers_count=$((committers_count + 1))
            fi
          done <<< "$sorted_contributors"

          # Set the thumbnail URL and color based on top contributor(s)
          if [ $top_contributor_count -eq 1 ]; then
            thumbnail_url="$top_contributor_avatar"
          else
            thumbnail_url="https://i.imgur.com/qt1ixRk.gif"
            embed_color=$(hex_to_decimal "$default_color")
          fi

          thumbnail_url="https://i.imgur.com/qt1ixRk.gif"

          # Truncate field values
          max_length=1000
          commit_messages=$(echo "$COMMIT_LOG" | sed 's/%0A/\n/g; s/^/\n/')
          if [ ${#developers} -gt $max_length ]; then
            developers="${developers:0:$max_length}... (truncated)"
          fi
          if [ ${#commit_messages} -gt $max_length ]; then
            commit_messages="${commit_messages:0:$max_length}... (truncated)"
          fi
          # Construct Discord payload
          discord_data=$(jq -nc \
                        --arg field_value "$commit_messages" \
                        --arg footer_text "Version $VERSION" \
                        --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)" \
                        --arg embed_color "$embed_color" \
                        '{
                          "content": "@",
                          "embeds": [
                            {
                              "title": "New Alpha-Build dropped 🔥",
                              "color": $embed_color,
                              "fields": [
                                {
                                  "name": "Commits:",
                                  "value": $field_value,
                                  "inline": true
                                }
                              ],
                              "footer": {
                                "text": $footer_text
                              },
                              "timestamp": $timestamp
                            }
                          ],
                          "attachments": []
                        }')
          echo "Debug: Final Discord payload is:"
          echo "$discord_data"
          # Send Discord message
          curl -H "Content-Type: application/json" \
              -d "$discord_data" \
              ${{ secrets.DISCORD_WEBHOOK_URL }}

          # Format commit messages for Telegram
          telegram_commit_messages=$(echo "$COMMIT_LOG" | sed 's/%0A/\n/g' | while read -r line; do
              message=$(echo "$line" | sed -E 's/● (.*) ~(.*) \[֍\]\((.*)\)/● \1 ~\2 <a href="\3">֍<\/a>/')
              message=$(echo "$message" | sed -E 's/\[#([0-9]+)\]\((https:\/\/github\.com\/[^)]+)\)/<a href="\2">#\1<\/a>/g')
              echo "$message"
          done)
          telegram_commit_messages="<blockquote>${telegram_commit_messages}</blockquote>"
          echo "$telegram_commit_messages"

          # Configuring dev info
          echo "$developers" > dev_info.txt
          # making the file executable
          chmod +x scripts/tel_parser.sed
          ./scripts/tel_parser.sed dev_info.txt >> output.txt
          dev_info_tel=$(< output.txt)

          telegram_dev_info="<blockquote>${dev_info_tel}</blockquote>"
          echo "$telegram_dev_info"




  upload_download_url:
    runs-on: ubuntu-latest
    needs: [make_and_upload_git_changes]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install GitHub CLI
        run: |
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Authenticate GitHub CLI
        run: echo "${{secrets.FINE_GRAIN_TOKEN}}" | gh auth login --with-token

      - name: Fetch latest release assets with gh
        id: fetch_assets
        run: |
          gh release view --repo ${{github.repository}} ${{github.ref_name}} --json assets --jq '.assets[].url' > asset_links.txt

      - name: Print fetched List
        run: cat asset_links.txt

      - name: Read, sort, and format links from the file
        id: format_links
        run: |
          # Read links from the file
          LINKS=$(cat asset_links.txt | sort)
          
          # Initialize the message
          MESSAGE="**Dantotsu ${{github.ref_name}} Downloads:**\n\n"
          
          # Loop through each link and format them
          while IFS= read -r LINK; do
            if [[ $LINK == *"arm64"* ]]; then
              MESSAGE+="• [Android_arm64]($LINK)\n"
            elif [[ $LINK == *"armeabi"* ]]; then
              MESSAGE+="• [Android_armeabi-v7a]($LINK)\n"
            elif [[ $LINK == *"Android_x86"* ]]; then
              MESSAGE+="• [Android_x86_64]($LINK)\n"
            elif [[ $LINK == *"iOS"* ]]; then
              MESSAGE+="• [iOS]($LINK)\n"
            elif [[ $LINK == *"Linux"* ]]; then
              MESSAGE+="• [Linux]($LINK)\n"
            elif [[ $LINK == *"macos"* ]]; then
              MESSAGE+="• [macOS]($LINK)\n"
            elif [[ $LINK == *"Installer"* ]]; then
              MESSAGE+="• [Windows]($LINK)\n"
            fi
          done <<< "$LINKS"

          # Save the message to an environment variable
          echo "MESSAGE=$MESSAGE" >> $GITHUB_ENV
      - name: Send message to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          MESSAGE: ${{ env.MESSAGE }}
        run: |
          # Send the message to Discord using the webhook
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"$MESSAGE\"}" \
            $DISCORD_WEBHOOK_URL
          
  generate-changelog:
    runs-on: ubuntu-latest
    needs: [build_android,build_windows,build_linux,build_ios,build_macos]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Clear existing CHANGELOG.md
      - name: Clear CHANGELOG.md
        run: |
          echo ""> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
      - name: Get previous tag
        id: get_prev_tag
        run: |
          echo "Getting the previous tag..."
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "prev_tag=$PREV_TAG" >> $GITHUB_ENV

      - name: Get commit messages between tags
        id: get_commits
        run: |
          COMMITS=$(git log ${{ env.prev_tag }}..HEAD --pretty=format:'%h %s' | tr '\n' '|')
          echo "commits=$COMMITS" >> $GITHUB_ENV

      - name: Categorize commits
        id: categorize
        run: |
          echo "Categorizing commits..."
          FEATURES=""
          BUG_FIXES=""
          REFACTORS=""
          STYLE_CHANGES=""
          PERFORMANCE=""
          CHORES=""
          REPO_URL="https://github.com/${{ github.repository }}"
    
          IFS='|' read -ra COMMIT_LIST <<< "${{ env.commits }}"
          echo "Commit list: ${COMMIT_LIST[@]}"
          for LINE in "${COMMIT_LIST[@]}"; do
          HASH=$(echo "$LINE" | awk '{print $1}')
          MESSAGE=$(echo "$LINE" | cut -d' ' -f2-)
          LINK="[$HASH]($REPO_URL/commit/$HASH)"

          FORMATTED_COMMIT="* $LINK: $MESSAGE"
          echo "Processing commit: $FORMATTED_COMMIT"
          if [[ $MESSAGE == feat* ]]; then
           FEATURES+="$FORMATTED_COMMIT\n"
          elif [[ $MESSAGE == fix* || $MESSAGE == bug* || $MESSAGE == improvement* || $MESSAGE == patch* ]]; then
          BUG_FIXES+="$FORMATTED_COMMIT\n"
          elif [[ $MESSAGE == refactor* ]]; then
          REFACTORS+="$FORMATTED_COMMIT\n"
          elif [[ $MESSAGE == style* ]]; then
          STYLE_CHANGES+="$FORMATTED_COMMIT\n"
          elif [[ $MESSAGE == perf* ]]; then
          PERFORMANCE+="$FORMATTED_COMMIT\n"
          elif [[ $MESSAGE == chore* || $MESSAGE == docs* || $MESSAGE == build* || $MESSAGE == ci* ]]; then
          CHORES+="$FORMATTED_COMMIT\n"
          fi
          done

          # Removed the version tag section
          # echo "### ${GITHUB_REF#refs/tags/}" >> CHANGELOG.md  # No version tag added

          if [ -n "$FEATURES" ]; then
          echo "### 🎉 New Features" >> CHANGELOG.md
          echo -e "$FEATURES" >> CHANGELOG.md
          fi
          if [ -n "$BUG_FIXES" ]; then
          echo "### 🛠️ Bug Fixes & Improvements" >> CHANGELOG.md
          echo -e "$BUG_FIXES" >> CHANGELOG.md
          fi
          if [ -n "$REFACTORS" ]; then
          echo "### 🔧 Refactors" >> CHANGELOG.md
          echo -e "$REFACTORS" >> CHANGELOG.md
          fi
          if [ -n "$STYLE_CHANGES" ]; then
          echo "### 🎨 Style Changes" >> CHANGELOG.md
          echo -e "$STYLE_CHANGES" >> CHANGELOG.md
          fi
          if [ -n "$PERFORMANCE" ]; then
          echo "### 🚀 Performance Improvements" >> CHANGELOG.md
            echo -e "$PERFORMANCE" >> CHANGELOG.md
          fi
          if [ -n "$CHORES" ]; then
            echo "### 🧹 Chores & Documentation" >> CHANGELOG.md
            echo -e "$CHORES" >> CHANGELOG.md
          fi
          
      - name: Commit and push changelog
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add CHANGELOG.md
          git commit -m "Update changelog for version ${{ github.ref_name }}"
          git push origin HEAD:main

      - name: Set Tag Variable
        id: tag
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Create or Update Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          bodyFile: CHANGELOG.md
          tag: ${{ env.TAG }}
          allowUpdates: true